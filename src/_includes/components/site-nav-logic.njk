<script>
  const mNav = document.querySelector("site-nav");
  mNav.querySelectorAll("ul li").forEach(li => {
    li.onmouseenter = e => {
      const { target } = e;
      target.querySelector(":is(a,p)");
      currentFocus?.querySelector(":is(a,p)")?.blur();
      currentFocus = target;
    };
    // make sure that the click is not accepted when current route === location.pathname
  });
  function openNav(e) {
    e.stopPropagation();
    mNav.setAttribute("state", "open");
  }

  const backButton = mNav.querySelector("[data-nav-role='back'] button");
  const topButton = mNav.querySelector('[data-nav-role="top"]');
  const functions = mNav.querySelector(".functions");
  backButton.onclick = e => history.back();
  topButton.onclick = e => document.querySelector("main").scrollTo(0,0);
  //   handle button click
  mNav.querySelector("button").onclick = e => {
    e.stopPropagation();
    let state = mNav.getAttribute("state");
    mNav.setAttribute("state", state === "close" ? "open" : "close");
  };
  //   clickoutside callback
  const clickOutside = e => {
    if (
      e.target !== mNav.querySelector("ul") &&
      !(e.target.tagName === "A" && e.target.closest("site-nav") !== null)
    ) {
      mNav.setAttribute("state", "close");
    }
  };
  //   Handle tab focus of nav links
  let currentFocus = null;
  const tabFocus = e => {
    if (!currentFocus && e.key === "Enter") return;
    //   on escape set state of mNav and blur current focus
    if (e.key === "Escape") {
      mNav.setAttribute("state", "close");
      currentFocus.querySelector(":is(a,p)")?.blur();
      currentFocus = null;
    }

    if (e.key === "Enter") {
      if (e.target.pathname === location.pathname) {
        return null;
      }
      // mNav.setAttribute("state", "close");
      currentFocus.querySelector(":is(a,p)")?.click();
      currentFocus.querySelector(":is(a,p)")?.blur();
      currentFocus = null;
    }
    if (e.key === "Tab") {
      e.preventDefault();
      currentFocus?.querySelector(":is(a,p)")?.blur();
      if (!e.shiftKey) {
        const next = () => {
          //   go to next or first
          if (!currentFocus || !currentFocus.nextElementSibling) {
            currentFocus = mNav.querySelector("ul li:first-child");
            currentFocus.querySelector(":is(a,button)").focus();
          } else {
            const sibling = currentFocus.nextElementSibling;
            if (sibling.tagName === "HR") {
              currentFocus = sibling;
              next();
            } else {
              const nested = sibling.querySelector("ul li");
              if (nested) {
                currentFocus = nested;
              } else {
                currentFocus = sibling;
              }
              currentFocus.querySelector(":is(a,button)").focus();
            }
          }
        };
        next();
      } else {
        const prev = () => {
          //   got to previous or last
          if (!currentFocus || !currentFocus.previousElementSibling) {
            currentFocus = mNav.querySelector("ul li:last-child");
            currentFocus.querySelector(":is(a,p)").focus();
          } else {
            const sibling = currentFocus.previousElementSibling;
            if (sibling.tagName === "HR") {
              currentFocus = sibling;
              prev();
            } else {
              currentFocus = sibling;
              currentFocus.querySelector(":is(a,p)").focus();
            }
          }
        };
        prev();
      }
    }
  };
  const observer = new MutationObserver((mutationlist, observer) => {
    for (const attr of mutationlist) {
      //   Watch for attribute change on state attribute
      switch (attr.attributeName) {
        case "state":
          let state = mNav.getAttribute("state");
          if (state === "open") {
            document.addEventListener("click", clickOutside);
            document.addEventListener("keydown", tabFocus);
          } else {
            document.removeEventListener("click", clickOutside);
            document.removeEventListener("keydown", tabFocus);
            // currentFocus.querySelector("a")?.blur();
          }
          break;
        //   Watch for attribute change on current-route attribute
        case "current-route":
          mNav.querySelectorAll("ul li :is(a,p)").forEach(a => {
            if (a.pathname === mNav.getAttribute("current-route")) {
              a.setAttribute("aria-current", "page");
            } else {
              a.removeAttribute("aria-current");
            }
          });
          break;
      }
    }
  });
  observer.observe(mNav, { attributeFilter: ["state", "current-route"] });
</script>
