<script>
  const mNav = document.querySelector("site-nav");
  mNav.querySelectorAll("ul li").forEach(li => {
    li.onmouseenter = e => {
      const { target } = e;
      target.querySelector("a");
      currentFocus?.querySelector("a")?.blur();
      currentFocus = target;
    };
    // make sure that the click is not accepted when current route === location.pathname
  });
  function openNav(e) {
    e.stopPropagation();
    mNav.setAttribute("state", "open");
  }
  //   handle button click
  mNav.querySelector("button").onclick = e => {
    e.stopPropagation();
    let state = mNav.getAttribute("state");
    mNav.setAttribute("state", state === "close" ? "open" : "close");
  };
  //   clickoutside callback
  const clickOutside = e => {
    if (
      e.target !== mNav.querySelector("ul") &&
      !(e.target.tagName === "A" && e.target.closest("site-nav") !== null)
    ) {
      console.log(e.target.tagName && e.target.closest("site-nav") !== null);

      mNav.setAttribute("state", "close");
    }
  };
  //   Handle tab focus of nav links
  let currentFocus = null;
  const tabFocus = e => {
    if (!currentFocus && e.key === "Enter") return;
    //   on escape set state of mNav and blur current focus
    if (e.key === "Escape") {
      mNav.setAttribute("state", "close");
      currentFocus.querySelector("a")?.blur();
      currentFocus = null;
    }

    if (e.key === "Enter") {
      if (e.target.pathname === location.pathname) {
        console.log('same')
        return null;
      }
      // mNav.setAttribute("state", "close");
      currentFocus.querySelector("a")?.click();
      currentFocus.querySelector("a")?.blur();
      currentFocus = null;
    }
    if (e.key === "Tab") {
      e.preventDefault();
      currentFocus?.querySelector("a")?.blur();
      if (!e.shiftKey) {
        const next = () => {
          //   go to next or first
          if (!currentFocus || !currentFocus.nextElementSibling) {
            currentFocus = mNav.querySelector("ul li:first-child");
            currentFocus.querySelector("a").focus();
          } else {
            const sibling = currentFocus.nextElementSibling;
            if (
              sibling
                .querySelector("a")
                .classList.contains("under-construction")
            ) {
              currentFocus = sibling;
              next();
            } else {
              currentFocus = sibling;
              currentFocus.querySelector("a").focus();
            }
          }
        };
        next();
      } else {
        const prev = () => {
          //   got to previous or last
          if (!currentFocus || !currentFocus.previousElementSibling) {
            currentFocus = mNav.querySelector("ul li:last-child");
            currentFocus.querySelector("a").focus();
          } else {
            const sibling = currentFocus.previousElementSibling;
            if (
              sibling
                .querySelector("a")
                .classList.contains("under-construction")
            ) {
              currentFocus = sibling;
              prev();
            } else {
              currentFocus = sibling;
              currentFocus.querySelector("a").focus();
            }
          }
        };
        prev();
      }
    }
  };
  const observer = new MutationObserver((mutationlist, observer) => {
    for (const attr of mutationlist) {
      //   Watch for attribute change on state attribute
      switch (attr.attributeName) {
        case "state":
          let state = mNav.getAttribute("state");
          if (state === "open") {
            document.addEventListener("click", clickOutside);
            document.addEventListener("keydown", tabFocus);
          } else {
            document.removeEventListener("click", clickOutside);
            document.removeEventListener("keydown", tabFocus);
          }
          break;
        //   Watch for attribute change on current-route attribute
        case "current-route":
          mNav.querySelectorAll("ul li a").forEach(a => {
            if (a.pathname === mNav.getAttribute("current-route")) {
              a.setAttribute("aria-current", "page");
            } else {
              a.removeAttribute("aria-current");
            }
          });
          break;
      }
    }
  });
  observer.observe(mNav, { attributeFilter: ["state", "current-route"] });
</script>
